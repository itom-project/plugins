/* ********************************************************************
    Plugin "MyCobot280Pi" for itom software
    URL: http://www.uni-stuttgart.de/ito
    Copyright (C) 2018, Institut für Technische Optik (ITO),
    Universität Stuttgart, Germany

    This file is part of a plugin for the measurement software itom.

    This itom-plugin is free software; you can redistribute it and/or modify it
    under the terms of the GNU Library General Public Licence as published by
    the Free Software Foundation; either version 2 of the Licence, or (at
    your option) any later version.

    itom and its plugins are distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library
    General Public Licence for more details.

    You should have received a copy of the GNU Library General Public License
    along with itom. If not, see <http://www.gnu.org/licenses/>.
*********************************************************************** */

#ifndef DIALOGMYCOBOT280PI_H
#define DIALOGMYCOBOT280PI_H

/**\file dialogMyCobot280Pi.h
* \brief In this file, the class of the modal dialog for the MyCobot280Pi is specified.
*
*\sa dialogMyCobot280Pi, MyCobot280Pi
*\author Wolfram Lyda
*\date    Oct2011
*/

#include "common/sharedStructures.h"
#include "common/sharedStructuresQt.h"
#include "common/abstractAddInConfigDialog.h"

#include "ui_dialogMyCobot280Pi.h"

namespace ito
{
    class AddInBase; // forward declaration
}

//----------------------------------------------------------------------------------------------------------------------------------
/** @class dialogMyCobot280Pi
*   @brief Config dialog functionality for MyCobot280Pi
*
*   This class is used for the modal configuration dialog. It is used for parameter setup and calibration.
*   ui_dialogMyCobot280Pi.h is generated by the Gui-Editor.
*
*\sa MyCobot280Pi
*/
class DialogMyCobot280Pi : public ito::AbstractAddInConfigDialog
{
    Q_OBJECT

    private:
        Ui::DialogMyCobot280Pi ui;    //! Handle to the dialog
        int m_enable[10];    //! Vector with the enabled/disabled axis for calibration command
        int m_numaxis;    //! Number of axes of this device
        bool m_firstRun;
        ito::AddInBase *m_actuator;
        QPointer<ito::AddInBase> m_pluginPointer;

        void enableGUI(bool enabled);

    public:
        DialogMyCobot280Pi(ito::AddInBase *actuator);
        ~DialogMyCobot280Pi();

        ito::RetVal applyParameters();

    public slots:
        void parametersChanged(QMap<QString, ito::Param> params);

    private slots:
        void on_buttonBox_clicked(QAbstractButton* btn);
        void on_pushButtonCalib_clicked(); //!< If the button invokes a MyCobot280Pi::Calib of enabled axes
        void on_checkBox_EnableX_clicked(); //!< Handles enabling/disabling of the X axis
        void on_checkBox_EnableY_clicked(); //!< Handles enabling/disabling of the Y axis
        void on_checkBox_EnableZ_clicked(); //!< Handles enabling/disabling of the Z axis
};

#endif
